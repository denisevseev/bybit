const WebSocket = require('ws');
const TelegramBot = require('node-telegram-bot-api');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –≤–∞—à–∏–º —Ç–æ–∫–µ–Ω–æ–º –∏ –≤–∫–ª—é—á–µ–Ω–Ω—ã–º polling
const bot = new TelegramBot('6898599983:AAGCokpNt5YxG6_DmcnCOju4UHKJYOE7UlE');
const chatId = '5761109418';


// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
const INITIAL_BALANCE = 1000; // –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –≤ USDT
const TRADE_AMOUNT = 100; // –°—É–º–º–∞ —Å–¥–µ–ª–∫–∏ –≤ USDT

const CHANGE_THRESHOLD = 10; // –ü–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–¥–µ–ª–∫—É (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)
const MIN_PROFIT_THRESHOLD = 5; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–∞ (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)
const TRAILING_STOP_PERCENT = 3; // –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–∞ –æ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)
const MAX_LOSS_THRESHOLD = 20; // –ü–æ—Ä–æ–≥ —É–±—ã—Ç–∫–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–¥–µ–ª–∫–∏ (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)
const MONITORING_PERIOD = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö

// –û–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–∂–¥–æ–π –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã
let pairs = {};

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É—á–µ—Ç–∞ –ø—Ä–∏–±—ã–ª–∏ –∏ —É–±—ã—Ç–∫–æ–≤
let totalProfit = 0; // –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å –≤ USDT
let totalLoss = 0; // –û–±—â–∏–π —É–±—ã—Ç–æ–∫ –≤ USDT

bot.sendMessage(chatId, '---------–ù–û–í–û–ï –ù–ê–ß–ê–õ–û--------').catch((error) => {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', error.message);
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
function startWebSocket() {
    const ws = new WebSocket('wss://stream.binance.com:9443/ws/!ticker@arr');

    ws.on('open', function open() {
        console.log('WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Binance');
    });

    ws.on('message', function incoming(data) {
        try {
            const tickers = JSON.parse(data);

            tickers.forEach((ticker) => {
                processTicker(ticker);
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error.message);
        }
    });

    ws.on('error', function error(error) {
        console.error('WebSocket –æ—à–∏–±–∫–∞:', error.message);
    });

    ws.on('close', function close() {
        console.log('WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ. –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');

        // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏
        setTimeout(() => {
            startWebSocket();
        }, 5000); // 5 —Å–µ–∫—É–Ω–¥
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∏–∫–µ—Ä–∞
function processTicker(ticker) {
    const symbol = ticker.s;
    const currentPrice = parseFloat(ticker.c);

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–∞—Ä—ã —Å USDT
    if (!symbol.endsWith('USDT')) {
        return;
    }

    const now = Date.now();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–∞—Ä—ã, –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞
    if (!pairs[symbol]) {
        pairs[symbol] = {
            initialPrice: currentPrice,
            initialTime: now,
            inPosition: false,
            entryPrice: null,
            maxPrice: null,
            direction: null, // 'up' –∏–ª–∏ 'down'
        };
    }

    const pairData = pairs[symbol];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ 24 —á–∞—Å–∞ —Å –º–æ–º–µ–Ω—Ç–∞ –Ω–∞—á–∞–ª–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    if (now - pairData.initialTime >= MONITORING_PERIOD) {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –æ—Ç—Å—á–µ—Ç
        resetPairData(symbol, currentPrice, now);
        console.log(`–°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–∞—Ä—ã ${symbol} –ø–æ—Å–ª–µ 24 —á–∞—Å–æ–≤.`);
    }

    // –ï—Å–ª–∏ –º—ã –Ω–µ –≤ –ø–æ–∑–∏—Ü–∏–∏
    if (!pairData.inPosition) {
        const priceChangePercent = ((currentPrice - pairData.initialPrice) / pairData.initialPrice) * 100;

        if (Math.abs(priceChangePercent) >= CHANGE_THRESHOLD) {
            // –í—Ö–æ–¥–∏–º –≤ —Å–¥–µ–ª–∫—É
            pairData.inPosition = true;
            pairData.entryPrice = currentPrice;
            pairData.maxPrice = currentPrice;
            pairData.direction = priceChangePercent > 0 ? 'up' : 'down';

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—Ö–æ–¥–µ –≤ —Å–¥–µ–ª–∫—É
            const directionText = pairData.direction === 'up' ? 'üìà –ü–æ–∫—É–ø–∫–∞' : 'üìâ –ü—Ä–æ–¥–∞–∂–∞';
            const formattedSymbol = symbol.replace('USDT', '/USDT');
            const message = `
<b>–í—Ö–æ–¥ –≤ —Å–¥–µ–ª–∫—É (${directionText}):</b> ${formattedSymbol}
–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: <b>${currentPrice}</b>
<a href="https://www.binance.com/ru/trade/${formattedSymbol}?layout=pro">–û—Ç–∫—Ä—ã—Ç—å –≤ Binance</a>
`;
            bot.sendMessage(chatId, message, { parse_mode: 'HTML' }).catch((error) => {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', error.message);
            });

            console.log(`–í—Ö–æ–¥ –≤ —Å–¥–µ–ª–∫—É –ø–æ –ø–∞—Ä–µ ${symbol} –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ ${pairData.direction}`);
        }
    } else {
        // –ú—ã –≤ –ø–æ–∑–∏—Ü–∏–∏, —Å–ª–µ–¥–∏–º –∑–∞ —Ü–µ–Ω–æ–π
        const movementSinceEntry = ((currentPrice - pairData.entryPrice) / pairData.entryPrice) * 100;

        // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        if (pairData.direction === 'up' && currentPrice > pairData.maxPrice) {
            pairData.maxPrice = currentPrice;
        } else if (pairData.direction === 'down' && currentPrice < pairData.maxPrice) {
            pairData.maxPrice = currentPrice;
        }

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã
        let deviationPercent = 0;
        if (pairData.direction === 'up') {
            deviationPercent = ((pairData.maxPrice - currentPrice) / pairData.maxPrice) * 100;
        } else if (pairData.direction === 'down') {
            deviationPercent = ((currentPrice - pairData.maxPrice) / pairData.maxPrice) * 100;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ñ–∏–∫—Å–∞—Ü–∏—é –ø—Ä–∏–±—ã–ª–∏ –∏–ª–∏ —É–±—ã—Ç–∫–∞
        if (pairData.direction === 'up') {
            if (movementSinceEntry >= MIN_PROFIT_THRESHOLD && deviationPercent >= TRAILING_STOP_PERCENT) {
                // –§–∏–∫—Å–∏—Ä—É–µ–º –ø—Ä–∏–±—ã–ª—å
                const profitPercent = ((pairData.maxPrice - pairData.entryPrice) / pairData.entryPrice) * 100 - TRAILING_STOP_PERCENT;
                const profit = (TRADE_AMOUNT * profitPercent) / 100;
                totalProfit += profit;

                const formattedSymbol = symbol.replace('USDT', '/USDT');
                const message = `
‚úÖ <b>–°–¥–µ–ª–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞ —Å –ø—Ä–∏–±—ã–ª—å—é!</b>
–ü–∞—Ä–∞: ${formattedSymbol}
–ü—Ä–∏–±—ã–ª—å: <b>${profit.toFixed(2)} USDT (${profitPercent.toFixed(2)}%)</b>
–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: <b>${currentPrice}</b>
–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: <b>${totalProfit.toFixed(2)} USDT</b>
–û–±—â–∏–π —É–±—ã—Ç–æ–∫: <b>${totalLoss.toFixed(2)} USDT</b>
<a href="https://www.binance.com/ru/trade/${formattedSymbol}?layout=pro">–û—Ç–∫—Ä—ã—Ç—å –≤ Binance</a>
`;
                bot.sendMessage(chatId, message, { parse_mode: 'HTML' }).catch((error) => {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', error.message);
                });

                // –ü–æ—Å–ª–µ —Ñ–∏–∫—Å–∞—Ü–∏–∏ –ø—Ä–∏–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
                pairData.inPosition = false;
                pairData.initialPrice = currentPrice;
                pairData.initialTime = now;
                pairData.direction = 'down'; // –¢–µ–ø–µ—Ä—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞–∂–∏
                console.log(`–§–∏–∫—Å–∞—Ü–∏—è –ø—Ä–∏–±—ã–ª–∏ –ø–æ ${symbol}. –¢–µ–ø–µ—Ä—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ –≤–Ω–∏–∑.`);
            } else if (movementSinceEntry <= -MAX_LOSS_THRESHOLD) {
                // –§–∏–∫—Å–∏—Ä—É–µ–º —É–±—ã—Ç–æ–∫
                const loss = (TRADE_AMOUNT * MAX_LOSS_THRESHOLD) / 100;
                totalLoss += loss;

                const formattedSymbol = symbol.replace('USDT', '/USDT');
                const message = `
‚ùå <b>–°–¥–µ–ª–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞ —Å —É–±—ã—Ç–∫–æ–º.</b>
–ü–∞—Ä–∞: ${formattedSymbol}
–£–±—ã—Ç–æ–∫: <b>${loss.toFixed(2)} USDT (${MAX_LOSS_THRESHOLD}%)</b>
–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: <b>${currentPrice}</b>
–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: <b>${totalProfit.toFixed(2)} USDT</b>
–û–±—â–∏–π —É–±—ã—Ç–æ–∫: <b>${totalLoss.toFixed(2)} USDT</b>
<a href="https://www.binance.com/ru/trade/${formattedSymbol}?layout=pro">–û—Ç–∫—Ä—ã—Ç—å –≤ Binance</a>
`;
                bot.sendMessage(chatId, message, { parse_mode: 'HTML' }).catch((error) => {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', error.message);
                });

                // –ü–æ—Å–ª–µ —Ñ–∏–∫—Å–∞—Ü–∏–∏ —É–±—ã—Ç–∫–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                resetPairData(symbol, currentPrice, now);
                console.log(`–§–∏–∫—Å–∞—Ü–∏—è —É–±—ã—Ç–∫–∞ –ø–æ ${symbol}. –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –æ—Ç—Å—á–µ—Ç.`);
            }
        } else if (pairData.direction === 'down') {
            if (movementSinceEntry <= -MIN_PROFIT_THRESHOLD && deviationPercent >= TRAILING_STOP_PERCENT) {
                // –§–∏–∫—Å–∏—Ä—É–µ–º –ø—Ä–∏–±—ã–ª—å
                const profitPercent = ((pairData.entryPrice - pairData.maxPrice) / pairData.entryPrice) * 100 - TRAILING_STOP_PERCENT;
                const profit = (TRADE_AMOUNT * profitPercent) / 100;
                totalProfit += profit;

                const formattedSymbol = symbol.replace('USDT', '/USDT');
                const message = `
‚úÖ <b>–°–¥–µ–ª–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞ —Å –ø—Ä–∏–±—ã–ª—å—é!</b>
–ü–∞—Ä–∞: ${formattedSymbol}
–ü—Ä–∏–±—ã–ª—å: <b>${profit.toFixed(2)} USDT (${profitPercent.toFixed(2)}%)</b>
–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: <b>${currentPrice}</b>
–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: <b>${totalProfit.toFixed(2)} USDT</b>
–û–±—â–∏–π —É–±—ã—Ç–æ–∫: <b>${totalLoss.toFixed(2)} USDT</b>
<a href="https://www.binance.com/ru/trade/${formattedSymbol}?layout=pro">–û—Ç–∫—Ä—ã—Ç—å –≤ Binance</a>
`;
                bot.sendMessage(chatId, message, { parse_mode: 'HTML' }).catch((error) => {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', error.message);
                });

                // –ü–æ—Å–ª–µ —Ñ–∏–∫—Å–∞—Ü–∏–∏ –ø—Ä–∏–±—ã–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
                pairData.inPosition = false;
                pairData.initialPrice = currentPrice;
                pairData.initialTime = now;
                pairData.direction = 'up'; // –¢–µ–ø–µ—Ä—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–∫—É–ø–∫–∏
                console.log(`–§–∏–∫—Å–∞—Ü–∏—è –ø—Ä–∏–±—ã–ª–∏ –ø–æ ${symbol}. –¢–µ–ø–µ—Ä—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö.`);
            } else if (movementSinceEntry >= MAX_LOSS_THRESHOLD) {
                // –§–∏–∫—Å–∏—Ä—É–µ–º —É–±—ã—Ç–æ–∫
                const loss = (TRADE_AMOUNT * MAX_LOSS_THRESHOLD) / 100;
                totalLoss += loss;

                const formattedSymbol = symbol.replace('USDT', '/USDT');
                const message = `
‚ùå <b>–°–¥–µ–ª–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞ —Å —É–±—ã—Ç–∫–æ–º.</b>
–ü–∞—Ä–∞: ${formattedSymbol}
–£–±—ã—Ç–æ–∫: <b>${loss.toFixed(2)} USDT (${MAX_LOSS_THRESHOLD}%)</b>
–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: <b>${currentPrice}</b>
–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: <b>${totalProfit.toFixed(2)} USDT</b>
–û–±—â–∏–π —É–±—ã—Ç–æ–∫: <b>${totalLoss.toFixed(2)} USDT</b>
<a href="https://www.binance.com/ru/trade/${formattedSymbol}?layout=pro">–û—Ç–∫—Ä—ã—Ç—å –≤ Binance</a>
`;
                bot.sendMessage(chatId, message, { parse_mode: 'HTML' }).catch((error) => {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', error.message);
                });

                // –ü–æ—Å–ª–µ —Ñ–∏–∫—Å–∞—Ü–∏–∏ —É–±—ã—Ç–∫–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                resetPairData(symbol, currentPrice, now);
                console.log(`–§–∏–∫—Å–∞—Ü–∏—è —É–±—ã—Ç–∫–∞ –ø–æ ${symbol}. –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –æ—Ç—Å—á–µ—Ç.`);
            }
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä—ã
function resetPairData(symbol, currentPrice, now) {
    pairs[symbol] = {
        initialPrice: currentPrice,
        initialTime: now,
        inPosition: false,
        entryPrice: null,
        maxPrice: null,
        direction: null,
    };
}

startWebSocket();
