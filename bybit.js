const WebSocket = require('ws');
const messages = require('./messages');

// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
const INITIAL_BALANCE = 1000; // –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –≤ USDT
let currentBalance = INITIAL_BALANCE; // –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
const TRADE_AMOUNT_PERCENT = 0.1; // –¢–æ—Ä–≥—É–µ–º 10% –æ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞

const CHANGE_THRESHOLD = 10; // –ü–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–¥–µ–ª–∫—É (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)
const PROFIT_THRESHOLD = 5; // –ü–æ—Ä–æ–≥ –ø—Ä–∏–±—ã–ª–∏ –¥–ª—è —Ñ–∏–∫—Å–∞—Ü–∏–∏ (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)
const MAX_LOSS_THRESHOLD = 20; // –ü–æ—Ä–æ–≥ —É–±—ã—Ç–∫–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–¥–µ–ª–∫–∏ (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)
const MONITORING_PERIOD = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö

// –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ –≤ USDT –∑–∞ 24 —á–∞—Å–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–¥–µ–ª–∫—É
const MIN_VOLUME_USDT = 1000000;

// –û–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–∂–¥–æ–π –≤–∞–ª—é—Ç–Ω–æ–π –ø–∞—Ä—ã
let pairs = {};

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É—á–µ—Ç–∞ –ø—Ä–∏–±—ã–ª–∏ –∏ —É–±—ã—Ç–∫–æ–≤
let totalProfit = 0; // –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å –≤ USDT
let totalLoss = 0; // –û–±—â–∏–π —É–±—ã—Ç–æ–∫ –≤ USDT

messages.sendStartMessage();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
function startWebSocket() {
    const ws = new WebSocket('wss://stream.binance.com:9443/ws/!ticker@arr');

    ws.on('open', () => {
        console.log('WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Binance');
    });

    ws.on('message', (data) => {
        try {
            const tickers = JSON.parse(data);
            tickers.forEach((ticker) => {
                processTicker(ticker);
            });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error.message);
        }
    });

    ws.on('error', (error) => {
        console.error('WebSocket –æ—à–∏–±–∫–∞:', error.message);
    });

    ws.on('close', () => {
        console.log('WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ. –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
        setTimeout(startWebSocket, 5000); // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∏–∫–µ—Ä–∞
function processTicker(ticker) {
    const symbol = ticker.s;
    const currentPrice = parseFloat(ticker.c);
    const volume24h = parseFloat(ticker.q); // –û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ –∑–∞ 24 —á–∞—Å–∞ –≤ USDT

    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–∞—Ä—ã —Å USDT –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤
    if (!symbol.endsWith('USDT') || volume24h < MIN_VOLUME_USDT) {
        return;
    }

    const now = Date.now();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–∞—Ä—ã, –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞
    if (!pairs[symbol]) {
        pairs[symbol] = {
            initialPrice: currentPrice,
            initialTime: now,
            inPosition: false,
            entryPrice: null,
            direction: null, // 'up' –∏–ª–∏ 'down'
        };
    }

    const pairData = pairs[symbol];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ 24 —á–∞—Å–∞ —Å –º–æ–º–µ–Ω—Ç–∞ –Ω–∞—á–∞–ª–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    if (now - pairData.initialTime >= MONITORING_PERIOD) {
        resetPairData(symbol, currentPrice, now);
        console.log(`–°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–∞—Ä—ã ${symbol} –ø–æ—Å–ª–µ 24 —á–∞—Å–æ–≤.`);
    }

    // –ï—Å–ª–∏ –º—ã –Ω–µ –≤ –ø–æ–∑–∏—Ü–∏–∏
    if (!pairData.inPosition) {
        const priceChangePercent = ((currentPrice - pairData.initialPrice) / pairData.initialPrice) * 100;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –º—ã –≤–æ–π—Ç–∏ –≤ —Å–¥–µ–ª–∫—É
        if (Math.abs(priceChangePercent) >= CHANGE_THRESHOLD && currentBalance >= INITIAL_BALANCE * TRADE_AMOUNT_PERCENT) {
            // –í—Ö–æ–¥–∏–º –≤ —Å–¥–µ–ª–∫—É
            const tradeAmount = currentBalance * TRADE_AMOUNT_PERCENT;
            currentBalance -= tradeAmount;
            pairData.inPosition = true;
            pairData.entryPrice = currentPrice;
            pairData.direction = priceChangePercent > 0 ? 'up' : 'down';

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—Ö–æ–¥–µ –≤ —Å–¥–µ–ª–∫—É
            messages.sendTradeEntryMessage(symbol, pairData.direction, currentPrice);

            console.log(`–í—Ö–æ–¥ –≤ —Å–¥–µ–ª–∫—É –ø–æ –ø–∞—Ä–µ ${symbol} –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ ${pairData.direction}`);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫
            sendOpenTradesUpdate();
        }
    } else {
        // –ú—ã –≤ –ø–æ–∑–∏—Ü–∏–∏, —Å–ª–µ–¥–∏–º –∑–∞ —Ü–µ–Ω–æ–π
        const movementSinceEntry = ((currentPrice - pairData.entryPrice) / pairData.entryPrice) * 100;
        const profitPercent = pairData.direction === 'up' ? movementSinceEntry : -movementSinceEntry;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ñ–∏–∫—Å–∞—Ü–∏—é –ø—Ä–∏–±—ã–ª–∏ –∏–ª–∏ —É–±—ã—Ç–∫–∞
        if (profitPercent >= PROFIT_THRESHOLD) {
            // –§–∏–∫—Å–∏—Ä—É–µ–º –ø—Ä–∏–±—ã–ª—å
            const profit = (currentBalance * TRADE_AMOUNT_PERCENT * PROFIT_THRESHOLD) / 100;
            totalProfit += profit;
            currentBalance += (currentBalance * TRADE_AMOUNT_PERCENT) + profit;

            messages.sendProfitMessage(symbol, profit, PROFIT_THRESHOLD, currentPrice, totalProfit, totalLoss);

            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–π –ø–∞—Ä—ã
            resetPairData(symbol, currentPrice, now);
            console.log(`–§–∏–∫—Å–∞—Ü–∏—è –ø—Ä–∏–±—ã–ª–∏ –ø–æ ${symbol}. –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –æ—Ç—Å—á–µ—Ç.`);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫
            sendOpenTradesUpdate();
        } else if (profitPercent <= -MAX_LOSS_THRESHOLD) {
            // –§–∏–∫—Å–∏—Ä—É–µ–º —É–±—ã—Ç–æ–∫
            const loss = (currentBalance * TRADE_AMOUNT_PERCENT * MAX_LOSS_THRESHOLD) / 100;
            totalLoss += loss;
            currentBalance += (currentBalance * TRADE_AMOUNT_PERCENT) - loss;

            messages.sendLossMessage(symbol, loss, currentPrice, totalProfit, totalLoss);

            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–π –ø–∞—Ä—ã
            resetPairData(symbol, currentPrice, now);
            console.log(`–§–∏–∫—Å–∞—Ü–∏—è —É–±—ã—Ç–∫–∞ –ø–æ ${symbol}. –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –æ—Ç—Å—á–µ—Ç.`);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫
            sendOpenTradesUpdate();
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä—ã
function resetPairData(symbol, currentPrice, now) {
    pairs[symbol] = {
        initialPrice: currentPrice,
        initialTime: now,
        inPosition: false,
        entryPrice: null,
        direction: null,
    };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫
function sendOpenTradesUpdate() {
    let openTrades = Object.keys(pairs)
        .filter(symbol => pairs[symbol].inPosition)
        .map(symbol => {
            const pairData = pairs[symbol];
            const movementSinceEntry = ((pairData.entryPrice - pairData.initialPrice) / pairData.initialPrice) * 100;
            const profitPercent = pairData.direction === 'up' ? movementSinceEntry : -movementSinceEntry;
            const directionText = pairData.direction === 'up' ? '–õ–æ–Ω–≥' : '–®–æ—Ä—Ç';
            return `${symbol.replace('USDT', '/USDT')}: –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${pairData.entryPrice.toFixed(2)}, ${directionText}, –¢–µ–∫—É—â–∏–π % –∏–∑–º–µ–Ω–µ–Ω–∏—è: ${profitPercent >= 0 ? '+' : ''}${profitPercent.toFixed(2)}%`;
        });

    if (openTrades.length > 0) {
        const message = `
üìä <b>–û—Ç–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏:</b>\n${openTrades.join('\n')}
`;
        messages.sendUpdateMessageList(message);
    } else {
        messages.sendUpdateMessageList('‚ÑπÔ∏è <b>–ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.</b>');
    }
}

startWebSocket();
